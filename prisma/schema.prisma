generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  name             String
  password         String
  profilPicture    String?
  referralCode     String?        @unique @default(dbgenerated("upper(substring(md5(random()::text), 1, 8))"))
  referredBy       String?        @default("")
  points           Int            @default(0)
  pointsExpiryDate DateTime?
  role             Role           @default(USER)
  isDeleted        Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  transactions     Transaction[]
  events           Event[]
  coupons          Coupon[]
  reviews          Review[]
  notifications    Notification[]

  referralsOwned ReferralTracking[] @relation("ReferralOwner")
  referralsUsed  ReferralTracking[] @relation("ReferredUser")

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Event {
  id                Int             @id @default(autoincrement())
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  eventCategoriesId Int
  eventCategory     EventCategories @relation(fields: [eventCategoriesId], references: [id])
  thumbnail         String
  title             String
  description       String          @db.Text
  content           String          @db.Text
  price             Int
  startDate         DateTime
  endDate           DateTime
  avaliableSeats    Int
  location          String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  transactions      Transaction[]
  vouchers          Voucher[]
  reviews           Review[]

  @@map("events")
}

model EventCategories {
  id          Int      @id @default(autoincrement())
  title       Title
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]

  @@map("event_categories")
}

enum Title {
  Food
  Music
  Business
  Comedy
  Religion
  Sport
  other
}

model Transaction {
  id           Int               @id @default(autoincrement())
  userId       Int
  user         User              @relation(fields: [userId], references: [id])
  eventId      Int
  event        Event             @relation(fields: [eventId], references: [id])
  couponId     Int?
  coupon       Coupon?           @relation(fields: [couponId], references: [id])
  voucherId    Int?
  voucher      Voucher?          @relation(fields: [voucherId], references: [id])
  status       TransactionStatus
  paymentProof String
  pointsUsed   Int
  totalPrice   Int
  quantity     Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  expiresAt    DateTime

  @@map("transactions")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
  REFUNDED
}

model Coupon {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  code          String
  discountValue Int
  isUsed        Boolean       @default(false)
  expiresAt     DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transactions  Transaction[]

  @@map("coupons")
}

model Voucher {
  id            Int           @id @default(autoincrement())
  eventId       Int
  event         Event         @relation(fields: [eventId], references: [id])
  code          String
  discountValue Int
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transactions  Transaction[]

  @@map("vouchers")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  message   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("notifications")
}

enum NotificationType {
  TRANSACTION
  PROMOTION
  INFORMATION
}

model ReferralTracking {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation("ReferralOwner", fields: [userId], references: [id])
  referTo      Int
  referredUser User     @relation("ReferredUser", fields: [referTo], references: [id])
  name         String
  referralCode String?
  referredName String
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt

  @@map("referraltrakings")
}
